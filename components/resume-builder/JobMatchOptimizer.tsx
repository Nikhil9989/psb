'use client';

import React from 'react';
import { motion } from 'framer-motion';
import { Sparkles, AlertCircle, BarChart3, CheckCircle, ArrowRight } from 'lucide-react';

interface JobMatchOptimizerProps {
  jobDescription: string;
  setJobDescription: (value: string) => void;
  onOptimize: () => void;
  isOptimizing: boolean;
  optimizationScore: number | null;
}

function JobMatchOptimizer({ jobDescription, setJobDescription, onOptimize, isOptimizing, optimizationScore }: JobMatchOptimizerProps) {
  // Suggestions that could be generated by AI in a real implementation
  const suggestions = [
    {
      category: 'Skills',
      items: [
        'Add industry-specific technologies that appear in the job description',
        'Quantify technical skills with proficiency levels',
        'Include both hard and soft skills relevant to the position',
      ],
    },
    {
      category: 'Experience',
      items: [
        'Highlight achievements with metrics (%, $, time saved)',
        'Mirror language from the job description in your bullet points',
        'Prioritize experiences most relevant to this specific role',
      ],
    },
    {
      category: 'Formatting',
      items: [
        'Ensure your most relevant qualifications appear "above the fold"',
        'Use the job title exactly as it appears in the listing',
        'Incorporate keywords from the job description naturally',
      ],
    },
  ];

  // Animation variants for progress bar
  const progressVariants = {
    initial: { width: 0 },
    animate: (score: number) => ({
      width: `${score}%`,
      transition: { duration: 1, ease: 'easeOut' },
    }),
  };

  // Generate color class based on score
  const getScoreColorClass = (score: number | null) => {
    if (score === null) return 'bg-slate-500';
    if (score < 60) return 'bg-red-500';
    if (score < 80) return 'bg-amber-500';
    return 'bg-green-500';
  };

  return (
    <div>
      <h3 className="text-xl font-semibold mb-6">Optimize for Job Description</h3>
      <p className="text-slate-300 mb-6">
        Paste a job description below to receive AI-assisted suggestions for tailoring your resume
        to this specific position. This increases your chances of passing applicant tracking systems
        and catching the recruiter&apos;s attention.
      </p>

      <div className="mb-6">
        <label className="block text-sm font-medium text-slate-300 mb-2">Job Description</label>
        <textarea
          value={jobDescription}
          onChange={(e) => setJobDescription(e.target.value)}
          rows={8}
          className="w-full px-4 py-3 bg-slate-700 rounded-lg border border-slate-600 text-white"
          placeholder="Paste the job description here to get personalized optimization suggestions..."
        />
      </div>

      <div className="flex justify-center mb-8">
        <button
          onClick={onOptimize}
          disabled={isOptimizing || !jobDescription.trim()}
          className={`px-6 py-3 rounded-lg flex items-center font-semibold ${
            isOptimizing || !jobDescription.trim()
              ? 'bg-slate-600 text-slate-400 cursor-not-allowed'
              : 'bg-amber-500 hover:bg-amber-600 text-black'
          }`}
        >
          {isOptimizing ? (
            <>
              <div className="w-5 h-5 border-2 border-slate-400 border-t-transparent rounded-full animate-spin mr-2"></div>
              Analyzing...
            </>
          ) : (
            <>
              <Sparkles className="mr-2" size={18} />
              Optimize Resume
            </>
          )}
        </button>
      </div>

      {optimizationScore !== null && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="mb-8 p-6 bg-slate-700 rounded-lg"
        >
          <h4 className="text-lg font-semibold mb-4 flex items-center">
            <BarChart3 className="mr-2" size={20} />
            Resume Match Score
          </h4>

          <div className="mb-6">
            <div className="flex justify-between mb-2">
              <span className="text-sm text-slate-300">Match Percentage</span>
              <span className="text-sm font-medium text-white">{optimizationScore}%</span>
            </div>
            <div className="h-3 w-full bg-slate-600 rounded-full overflow-hidden">
              <motion.div
                className={`h-full ${getScoreColorClass(optimizationScore)}`}
                variants={progressVariants}
                initial="initial"
                animate="animate"
                custom={optimizationScore}
              />
            </div>
          </div>

          <div className="mb-6">
            <div className="flex items-center mb-4">
              {optimizationScore >= 80 ? (
                <CheckCircle className="text-green-500 mr-2" size={20} />
              ) : (
                <AlertCircle className="text-amber-500 mr-2" size={20} />
              )}
              <span className="text-white font-medium">
                {optimizationScore >= 80
                  ? 'Your resume is well-optimized for this job!'
                  : 'Your resume could use some improvements for this job.'}
              </span>
            </div>
            <p className="text-slate-300 text-sm">
              {optimizationScore >= 80
                ? 'You've incorporated key skills and experience that match this job description. Minor adjustments below could further improve your chances.'
                : 'Consider the suggestions below to better align your resume with this job description and increase your chances of getting an interview.'}
            </p>
          </div>

          <div>
            <h5 className="text-md font-medium mb-4 text-white">Optimization Suggestions</h5>
            <div className="space-y-4">
              {suggestions.map((category, index) => (
                <div key={index} className="bg-slate-800 rounded-lg p-4">
                  <h6 className="font-medium text-amber-400 mb-2">{category.category}</h6>
                  <ul className="space-y-2">
                    {category.items.map((item, itemIndex) => (
                      <li key={itemIndex} className="flex items-start">
                        <ArrowRight className="text-amber-500 mr-2 flex-shrink-0 mt-1" size={14} />
                        <span className="text-sm text-slate-300">{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>
        </motion.div>
      )}

      {!optimizationScore && jobDescription.trim() && (
        <div className="text-center p-6 bg-slate-700 rounded-lg">
          <p className="text-slate-300">
            Click "Optimize Resume" to receive AI-powered suggestions tailored to this job description.
          </p>
        </div>
      )}
    </div>
  );
}

export default JobMatchOptimizer;